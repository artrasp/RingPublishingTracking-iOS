//
//  EventsManagerTests.swift
//  AppTrackingTests
//
//  Created by Artur Rymarz on 21/09/2021.
//  Copyright Â© 2021 Ringier Axel Springer Tech. All rights reserved.
//

import XCTest

class EventsManagerTests: XCTestCase {

    // MARK: Setup

    override func setUp() {
        super.setUp()
    }

    // MARK: Tests

    func testEventsManager_setEaUuidDateInNearFuture_theIdentifierIsValid() {
        // Given

        // Lifetime = 24h
        // Creation Date = 12 hours ago
        let creationDate = Date().addingTimeInterval(TimeInterval(-60 * 60 * 12))
        let eaUuid = EaUuid(value: "1234567890", lifetime: 60 * 60 * 24, creationDate: creationDate)

        let storage = StaticStorage(eaUuid: eaUuid, trackingIds: nil, postInterval: nil)
        let manager = EventsManager(storage: storage)

        // Then
        XCTAssertTrue(manager.isEaUuidValid, "The identifier should be valid")
    }

    func testEventsManager_storeIds_storedIdsAreProperlyLoaded() {
        // Given
        let creationDate = Date().addingTimeInterval(TimeInterval(-60 * 60 * 12))
        let eaUuid = EaUuid(value: "1234567890", lifetime: 60 * 60 * 24, creationDate: creationDate)
        let storage = StaticStorage(eaUuid: eaUuid, trackingIds: [
            "key1": .init(value: "id1", lifetime: nil),
            "key2": .init(value: "id2", lifetime: nil),
            "key3": .init(value: "id3", lifetime: nil)
        ], postInterval: nil)
        let manager = EventsManager(storage: storage)

        // Then
        XCTAssertEqual(manager.storedIds().count, 4, "Stored ids number should be correct")
    }

    func testEventsManager_doNotSetEaUuid_theIdentifierIsInvalid() {
        // Given
        let storage = StaticStorage(eaUuid: nil, trackingIds: nil, postInterval: nil)
        let manager = EventsManager(storage: storage)

        // Then
        XCTAssertFalse(manager.isEaUuidValid, "The identifier should be invalid")
    }

    func testEventsManager_add5EventsToTheQueue_builtRequestContains5Events() {
        // Given
        let manager = EventsManager(storage: StaticStorage())

        // When
        manager.addEvents([
            Event.smallEvent(),
            Event.smallEvent(),
            Event.smallEvent(),
            Event.smallEvent(),
            Event.smallEvent()
        ])

        let request = manager.buildEventRequest()
        let events = request.events

        // Then
        XCTAssertEqual(events.count, 5, "Event request should contain proper number of events")
    }

    func testEventsManager_add1TooBigEventToTheQueue_builtRequestContains0Events() {
        // Given
        let manager = EventsManager(storage: StaticStorage())

        // When
        manager.addEvents([Event.tooBigEvent()])

        let request = manager.buildEventRequest()
        let events = request.events

        // Then
        XCTAssertEqual(events.count, 0, "Event request should contain proper number of events")
    }

    func testEventsManager_addEventsOverRequestBodySizeLimit_builtRequestBodySizeIsBelow1MB() {
        // Given
        let manager = EventsManager(storage: StaticStorage())

        let bodySizeLimit = Constants.requestBodySizeLimit
        let singleEventSize = Event.smallEvent().toReportedEvent().sizeInBytes

        // When
        let eventsAmount = Int(floor(Double(bodySizeLimit) / Double(singleEventSize))) + 1

        for _ in 0..<eventsAmount {
            manager.addEvents([Event.smallEvent()])
        }

        let request = manager.buildEventRequest()

        // Then
        XCTAssertLessThan(request.dictionary.jsonSizeInBytes,
                          bodySizeLimit,
                          "Event request body size should be below \(bodySizeLimit)")

        XCTAssertLessThan(request.events.count, eventsAmount, "Events above body size limit should not be added")
    }
}

private extension Event {
    func toReportedEvent() -> ReportedEvent {
        ReportedEvent(clientId: analyticsSystemName, eventType: eventName, data: eventParameters)
    }

    static func smallEvent() -> Self { // 190 bytes
        Event(eventParameters: [
            "key1": "value",
            "key2": "value",
            "key3": "value",
            "key4": "value",
            "key5": "value",
            "key6": "value",
            "key7": "value",
            "key8": "value",
            "key9": "value",
            "key10": "value"
        ])
    }

    static func tooBigEvent() -> Self { // over 16000 bytes
        Event(eventParameters: [
            // swiftlint:disable line_length
            "key": ""
        ])
    }
}
